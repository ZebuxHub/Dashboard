const express = require('express');
const crypto = require('crypto');
const router = express.Router();

// Generate new token
router.post('/generate', (req, res) => {
  try {
    const { username, autoGenerate } = req.body;
    
    // Auto-generate mode - no username required
    if (autoGenerate) {
      // Generate secure token
      const tokenId = crypto.randomBytes(16).toString('hex');
      const token = `zebux_${tokenId}`;
      
      console.log('ðŸŽ« Auto-generated token:', token);
      
      return res.json({
        success: true,
        token: token,
        autoGenerated: true,
        createdAt: new Date().toISOString(),
        message: 'Token generated successfully!'
      });
    }
    
    // Legacy mode with username
    if (!username || username.length < 3) {
      return res.status(400).json({ error: 'Username must be at least 3 characters' });
    }
    
    // Generate secure token
    const tokenId = crypto.randomBytes(16).toString('hex');
    const token = `zebux_${tokenId}`;
    
    // Here you would save to database
    console.log('ðŸŽ« Generated token for:', username);
    
    res.json({
      success: true,
      token: token,
      username: username,
      createdAt: new Date().toISOString(),
      message: 'Token generated successfully!'
    });
    
  } catch (error) {
    console.error('Token generation error:', error);
    res.status(500).json({ error: 'Failed to generate token' });
  }
});

// Validate token
router.post('/validate', (req, res) => {
  try {
    const { token } = req.body;
    
    if (!token || !token.startsWith('zebux_')) {
      return res.status(400).json({ 
        valid: false, 
        error: 'Invalid token format' 
      });
    }
    
    // Here you would check database
    // For now, just validate format
    const isValid = token.length > 10;
    
    res.json({
      valid: isValid,
      token: isValid ? token : null,
      message: isValid ? 'Token is valid' : 'Invalid token'
    });
    
  } catch (error) {
    console.error('Token validation error:', error);
    res.status(500).json({ error: 'Failed to validate token' });
  }
});

// List tokens (admin only - simplified)
router.get('/list', (req, res) => {
  try {
    // Here you would fetch from database
    // For now, return mock data
    res.json({
      success: true,
      tokens: [
        {
          token: 'zebux_example123',
          username: 'TestUser',
          createdAt: new Date().toISOString(),
          lastUsed: new Date().toISOString(),
          active: true
        }
      ]
    });
    
  } catch (error) {
    console.error('Token list error:', error);
    res.status(500).json({ error: 'Failed to fetch tokens' });
  }
});

module.exports = router;
